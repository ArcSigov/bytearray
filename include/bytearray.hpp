#pragma once

#include "base_bytearray.h"
#include <memory>

namespace Container {

    template<std::uint64_t N>
    class ByteArray
    {    
        static_assert(N > 0);
        public:
            ByteArray() {
                _base.reset(new BaseByteArray(_max_size));
            }
            ~ByteArray() {
                _base.reset();
            }            
        private:
            static constexpr std::uint64_t _max_size = N;
            std::unique_ptr<BaseByteArray> _base;
    };

    

// Класс ByteArray предназначен для хранения, сериализации и десериализации данных
// арифметических типов. Класс должен удовлетворять следующим требованиям:
// ● хранить данные на стеке (можно использовать std::array);
// ● размер хранилища должен задаваться аргументом шаблона в виде
// натурального числа N со значением больше 0;
// ● содержать оператор “<<” для последовательного добавления в экземпляр
// данных произвольного арифметического типа;
// ● содержать оператор “>>” для последовательного вывода данных произвольного
// арифметического типа;
// ● содержать индексатор для доступа к произвольному байту по ссылке с
// проверкой выхода за границы;
// ● метод копирования данных в произвольный контейнер, посредством итератора
// целевого контейнера:
// template<typename TOutputIterator>
// void copy(TOutputIterator result);
// ● метод копирования данных в вектор:
// std::vector<uint8_t> toVector() const;
// ● методы begin() и end(), возвращающие итератор начала и конца
// последовательности соответственно;
// ● шаблонный метод t


}